jobs:
  - job: production_build
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-24.04'
          tfClcScriptName: 'tf'
        macOS:
          imageName: 'macOS-10.15'
          tfClcScriptName: 'tf'
        windows:
          imageName: 'windows-2019'
          tfClcScriptName: 'tf.cmd'
    pool:
      vmImage: $(imageName)
    steps:
      - task: CmdLine@1
        displayName: Run printenv
        inputs:
          filename: printenv

      - task: Gradle@2
        displayName: Gradle build
        inputs:
          jdkVersionOption: 1.8
          options: '--info'
          tasks: build zip

      - pwsh: ./.azure/install-tfs-clc.ps1
        displayName: TFS client setup

      - pwsh: |
          git config --global user.email "test@example.com"
          git config --global user.name "Test User"
        displayName: Git setup

      - task: Gradle@2
        displayName: Run integration tests
        condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], false))
        inputs:
          jdkVersionOption: 1.8
          options: '--info'
          tasks: L2test:cleanTest L2test:test :client:backend:test
        env:
          MSVSTS_INTELLIJ_RUN_L2_TESTS: true
          MSVSTS_INTELLIJ_TF_EXE: $(Build.SourcesDirectory)/.azure/.installed/tfs-clc/TEE-CLC-14.134.0/$(tfClcScriptName)
          MSVSTS_INTELLIJ_VSO_GIT_REPO_URL: $(VSO_GIT_REPO_URL)
          MSVSTS_INTELLIJ_VSO_LEGACY_GIT_REPO_URL: $(VSO_LEGACY_GIT_REPO_URL)
          MSVSTS_INTELLIJ_VSO_PASS: $(VSO_PASS)
          MSVSTS_INTELLIJ_VSO_SERVER_URL: $(VSO_SERVER_URL)
          MSVSTS_INTELLIJ_VSO_TEAM_PROJECT: $(VSO_TEAM_PROJECT)
          MSVSTS_INTELLIJ_VSO_USER: $(VSO_USER)
          MSVSTS_INTELLIJ_UNIQUE_SUFFIX: $(Agent.OS).$(Build.BuildNumber)

# Disabled for publish failure investigation.
#      - task: PublishPipelineArtifact@1
#        displayName: "Publish Artifact: $(build.buildNumber)"
#        condition: and(eq(variables['System.PullRequest.IsFork'], false), eq(variables['Agent.OS'], 'Linux'))
#        inputs:
#          path: 'plugin/build/distributions'
#          artifact: 'artifact.$(build.buildNumber).$(System.JobId)'
#
#      - task: PublishPipelineArtifact@1
#        displayName: "Publish unit test reports"
#        condition: always()
#        inputs:
#          path: 'plugin/build/reports'
#          artifact: '$(Agent.OS)-test-reports.$(build.buildNumber).$(System.JobId)'
#
#      - task: PublishPipelineArtifact@1
#        displayName: "Publish L2 test reports"
#        condition: eq(variables['System.PullRequest.IsFork'], false)
#        inputs:
#          path: 'L2Tests/build/reports'
#          artifact: '$(Agent.OS)-l2-test-reports.$(build.buildNumber).$(System.JobId)'
#
#      - task: PublishPipelineArtifact@1
#        displayName: "Publish L2 test logs"
#        condition: eq(variables['System.PullRequest.IsFork'], false)
#        inputs:
#          path: 'L2Tests/build/idea-sandbox/system-test/testlog'
#          artifact: '$(Agent.OS)-l2-test-logs.$(build.buildNumber).$(System.JobId)'
#
#      - task: PublishPipelineArtifact@1
#        displayName: "Publish backend integration test reports"
#        condition: eq(variables['System.PullRequest.IsFork'], false)
#        inputs:
#          path: 'client/backend/build/reports'
#          artifact: '$(Agent.OS)-backend-test-reports.$(build.buildNumber).$(System.JobId)'

  - job: test_build # check compilation for newest IDEA
    pool:
      vmImage: 'ubuntu-24.04'
    steps:
      - task: CmdLine@1
        displayName: Run printenv
        inputs:
          filename: printenv

      - task: Gradle@2
        displayName: Gradle compile
        inputs:
          jdkVersionOption: 1.8
          options: '--info -PideaVersion=2020.2'
          tasks: :plugin:compileJava
